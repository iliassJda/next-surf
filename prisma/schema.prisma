// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  username          String       @unique
  password          String
  firstname         String
  lastname          String
  nationality       String
  profilePictureCID String      @default("none")
  posts             SurfSpot[] @relation("UserPosts")
  saved             SurfSpot[] @relation("SavedPosts")
  reviews           Review[]
  followedUsers     UserFollows[] @relation("UserFollowing")
  followingUsers    UserFollows[] @relation("UserFollowers")
  SpotImage         SpotImage[]
}

model UserFollows {
  id                Int  @id @default(autoincrement())
  followerId        Int
  followedId        Int
  follower          User @relation("UserFollowers", fields: [followerId], references: [id])
  followed          User @relation("UserFollowing", fields: [followedId], references: [id])

  @@unique([followerId, followedId]) // Prevent duplicate follow relationships
}

model SurfSpot {
  id         Int         @id @default(autoincrement())
  title      String
  country    String
  continent  String
  city       String
  imageURL   String      @default("none")
  latitude   Float
  longitude  Float
  published  Boolean  @default(false)
  meanRating Float    @default(0)
  reviews    Review[]
  userID     User     @relation("UserPosts", fields: [userId], references: [id])
  userId     Int
  savers     User[]     @relation("SavedPosts")
  SpotImage  SpotImage[]

  //there can only be one surf spot with a certain title in a city.
  @@unique([city, title])
  @@unique([latitude, longitude])
}

model Review {
  id            Int      @id @default(autoincrement())
  rating        Float
  description   String //the whole review that the user provides.
  SurfSpot      SurfSpot @relation(fields: [surfSpotId], references: [id])
  surfSpotId    Int
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  username      String
}

model SpotImage {
  id         Int      @id @default(autoincrement())
  User       User     @relation(fields: [userId], references: [id])
  userId     Int
  SurfSpot   SurfSpot @relation(fields: [surfSpotId], references: [id])
  surfSpotId Int
  imageURL   String
}
